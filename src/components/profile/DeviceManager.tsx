import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  FlatList,
  Alert,
  Modal,
  TextInput,
  ActivityIndicator,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme } from '../../contexts/ThemeContext';
import * as Device from 'expo-device';
import * as Application from 'expo-application';

export interface LinkedDevice {
  id: string;
  name: string;
  type: 'mobile' | 'web' | 'desktop' | 'tablet';
  platform: string;
  lastActive: Date;
  isCurrentDevice: boolean;
  location?: string;
  ipAddress?: string;
  userAgent?: string;
}

interface DeviceManagerProps {
  visible: boolean;
  onClose: () => void;
  devices: LinkedDevice[];
  onDeviceRemove: (deviceId: string) => void;
  onDeviceAdd: (deviceCode: string) => Promise<boolean>;
}

const DeviceManager: React.FC<DeviceManagerProps> = ({
  visible,
  onClose,
  devices,
  onDeviceRemove,
  onDeviceAdd,
}) => {
  const { theme } = useTheme();
  const [showLinkDevice, setShowLinkDevice] = useState(false);
  const [deviceCode, setDeviceCode] = useState('');
  const [isLinking, setIsLinking] = useState(false);
  const [currentDeviceInfo, setCurrentDeviceInfo] = useState<any>(null);

  useEffect(() => {
    loadCurrentDeviceInfo();
  }, []);

  const loadCurrentDeviceInfo = async () => {
    try {
      const deviceInfo = {
        name: Device.deviceName || 'Unknown Device',
        type: Device.deviceType,
        platform: Device.osName || 'Unknown',
        brand: Device.brand,
        modelName: Device.modelName,
        osVersion: Device.osVersion,
        appVersion: Application.nativeApplicationVersion,
      };
      setCurrentDeviceInfo(deviceInfo);
    } catch (error) {
      console.error('Error loading device info:', error);
    }
  };

  const getDeviceIcon = (type: string, platform: string) => {
    switch (type) {
      case 'web':
        return 'globe-outline';
      case 'desktop':
        return platform.toLowerCase().includes('mac') ? 'laptop-outline' : 'desktop-outline';
      case 'tablet':
        return 'tablet-portrait-outline';
      case 'mobile':
      default:
        return platform.toLowerCase().includes('ios') ? 'phone-portrait-outline' : 'phone-portrait-outline';
    }
  };

  const getDeviceTypeColor = (type: string) => {
    switch (type) {
      case 'web': return '#4CAF50';
      case 'desktop': return '#2196F3';
      case 'tablet': return '#FF9800';
      case 'mobile': return '#9C27B0';
      default: return theme.colors.textMuted;
    }
  };

  const formatLastActive = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 1) return 'Active now';
    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    return `${days}d ago`;
  };

  const handleLinkDevice = async () => {
    if (!deviceCode.trim()) {
      Alert.alert('Error', 'Please enter a device code');
      return;
    }

    setIsLinking(true);
    try {
      const success = await onDeviceAdd(deviceCode.trim());
      if (success) {
        setDeviceCode('');
        setShowLinkDevice(false);
        Alert.alert('Success', 'Device linked successfully!');
      } else {
        Alert.alert('Error', 'Invalid device code or device already linked');
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to link device. Please try again.');
    } finally {
      setIsLinking(false);
    }
  };

  const handleRemoveDevice = (device: LinkedDevice) => {
    if (device.isCurrentDevice) {
      Alert.alert('Error', 'You cannot remove the current device');
      return;
    }

    Alert.alert(
      'Remove Device',
      `Are you sure you want to remove "${device.name}"? This will sign out the device from your account.`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Remove',
          style: 'destructive',
          onPress: () => onDeviceRemove(device.id),
        },
      ]
    );
  };

  const generateDeviceCode = () => {
    // In a real app, this would be generated by the server
    const code = Math.random().toString(36).substring(2, 8).toUpperCase();
    Alert.alert(
      'Device Code Generated',
      `Your device code is: ${code}\n\nEnter this code on the device you want to link. This code expires in 10 minutes.`,
      [{ text: 'OK' }]
    );
  };

  const renderDevice = ({ item }: { item: LinkedDevice }) => (
    <View style={styles.deviceItem}>
      <View style={styles.deviceIcon}>
        <Ionicons
          name={getDeviceIcon(item.type, item.platform) as any}
          size={24}
          color={getDeviceTypeColor(item.type)}
        />
      </View>
      <View style={styles.deviceInfo}>
        <View style={styles.deviceHeader}>
          <Text style={styles.deviceName}>{item.name}</Text>
          {item.isCurrentDevice && (
            <View style={styles.currentDeviceBadge}>
              <Text style={styles.currentDeviceText}>Current</Text>
            </View>
          )}
        </View>
        <Text style={styles.devicePlatform}>
          {item.platform} ‚Ä¢ {item.type.charAt(0).toUpperCase() + item.type.slice(1)}
        </Text>
        <Text style={styles.deviceLastActive}>
          {formatLastActive(item.lastActive)}
        </Text>
        {item.location && (
          <Text style={styles.deviceLocation}>üìç {item.location}</Text>
        )}
      </View>
      {!item.isCurrentDevice && (
        <TouchableOpacity
          style={styles.removeButton}
          onPress={() => handleRemoveDevice(item)}
        >
          <Ionicons name="trash-outline" size={20} color={theme.colors.error} />
        </TouchableOpacity>
      )}
    </View>
  );

  const styles = StyleSheet.create({
    modal: {
      flex: 1,
      backgroundColor: theme.colors.background,
    },
    header: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: theme.spacing.md,
      borderBottomWidth: 1,
      borderBottomColor: theme.colors.border,
      backgroundColor: theme.colors.surface,
    },
    backButton: {
      padding: theme.spacing.sm,
      marginRight: theme.spacing.md,
    },
    title: {
      fontSize: theme.typography.fontSize.lg,
      fontFamily: theme.typography.fontFamily.semiBold,
      color: theme.colors.text,
      flex: 1,
    },
    content: {
      flex: 1,
      padding: theme.spacing.md,
    },
    section: {
      marginBottom: theme.spacing.xl,
    },
    sectionTitle: {
      fontSize: theme.typography.fontSize.base,
      fontFamily: theme.typography.fontFamily.semiBold,
      color: theme.colors.text,
      marginBottom: theme.spacing.md,
    },
    sectionDescription: {
      fontSize: theme.typography.fontSize.sm,
      fontFamily: theme.typography.fontFamily.regular,
      color: theme.colors.textSecondary,
      marginBottom: theme.spacing.lg,
      lineHeight: theme.typography.lineHeight.relaxed * theme.typography.fontSize.sm,
    },
    actionButtons: {
      flexDirection: 'row',
      marginBottom: theme.spacing.lg,
    },
    actionButton: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: theme.colors.accent,
      paddingVertical: theme.spacing.md,
      paddingHorizontal: theme.spacing.lg,
      borderRadius: theme.borderRadius.md,
      marginHorizontal: theme.spacing.xs,
    },
    secondaryButton: {
      backgroundColor: theme.colors.inputBackground,
      borderWidth: 1,
      borderColor: theme.colors.border,
    },
    buttonText: {
      fontSize: theme.typography.fontSize.base,
      fontFamily: theme.typography.fontFamily.semiBold,
      color: '#FFFFFF',
      marginLeft: theme.spacing.sm,
    },
    secondaryButtonText: {
      color: theme.colors.text,
    },
    devicesList: {
      flex: 1,
    },
    deviceItem: {
      flexDirection: 'row',
      alignItems: 'center',
      backgroundColor: theme.colors.surface,
      borderRadius: theme.borderRadius.lg,
      padding: theme.spacing.md,
      marginBottom: theme.spacing.md,
      ...theme.shadows.sm,
    },
    deviceIcon: {
      width: 48,
      height: 48,
      borderRadius: 24,
      backgroundColor: theme.colors.inputBackground,
      alignItems: 'center',
      justifyContent: 'center',
      marginRight: theme.spacing.md,
    },
    deviceInfo: {
      flex: 1,
    },
    deviceHeader: {
      flexDirection: 'row',
      alignItems: 'center',
      marginBottom: 2,
    },
    deviceName: {
      fontSize: theme.typography.fontSize.base,
      fontFamily: theme.typography.fontFamily.semiBold,
      color: theme.colors.text,
      flex: 1,
    },
    currentDeviceBadge: {
      backgroundColor: theme.colors.success,
      paddingHorizontal: theme.spacing.sm,
      paddingVertical: 2,
      borderRadius: theme.borderRadius.sm,
    },
    currentDeviceText: {
      fontSize: theme.typography.fontSize.xs,
      fontFamily: theme.typography.fontFamily.semiBold,
      color: '#FFFFFF',
    },
    devicePlatform: {
      fontSize: theme.typography.fontSize.sm,
      fontFamily: theme.typography.fontFamily.regular,
      color: theme.colors.textSecondary,
      marginBottom: 2,
    },
    deviceLastActive: {
      fontSize: theme.typography.fontSize.xs,
      fontFamily: theme.typography.fontFamily.regular,
      color: theme.colors.textMuted,
    },
    deviceLocation: {
      fontSize: theme.typography.fontSize.xs,
      fontFamily: theme.typography.fontFamily.regular,
      color: theme.colors.textMuted,
      marginTop: 2,
    },
    removeButton: {
      padding: theme.spacing.sm,
      marginLeft: theme.spacing.md,
    },
    linkDeviceModal: {
      flex: 1,
      backgroundColor: 'rgba(0,0,0,0.5)',
      justifyContent: 'center',
      alignItems: 'center',
    },
    linkDeviceContainer: {
      backgroundColor: theme.colors.surface,
      borderRadius: theme.borderRadius.lg,
      padding: theme.spacing.xl,
      margin: theme.spacing.xl,
      minWidth: 300,
      ...theme.shadows.lg,
    },
    linkDeviceTitle: {
      fontSize: theme.typography.fontSize.lg,
      fontFamily: theme.typography.fontFamily.semiBold,
      color: theme.colors.text,
      textAlign: 'center',
      marginBottom: theme.spacing.md,
    },
    linkDeviceDescription: {
      fontSize: theme.typography.fontSize.sm,
      fontFamily: theme.typography.fontFamily.regular,
      color: theme.colors.textSecondary,
      textAlign: 'center',
      marginBottom: theme.spacing.lg,
      lineHeight: theme.typography.lineHeight.relaxed * theme.typography.fontSize.sm,
    },
    codeInput: {
      backgroundColor: theme.colors.inputBackground,
      borderRadius: theme.borderRadius.md,
      paddingHorizontal: theme.spacing.md,
      paddingVertical: theme.spacing.md,
      fontSize: theme.typography.fontSize.lg,
      fontFamily: theme.typography.fontFamily.medium,
      color: theme.colors.text,
      textAlign: 'center',
      letterSpacing: 2,
      marginBottom: theme.spacing.lg,
      borderWidth: 1,
      borderColor: theme.colors.border,
    },
    linkDeviceButtons: {
      flexDirection: 'row',
      justifyContent: 'space-between',
    },
    linkDeviceButton: {
      flex: 1,
      paddingVertical: theme.spacing.md,
      paddingHorizontal: theme.spacing.lg,
      borderRadius: theme.borderRadius.md,
      alignItems: 'center',
      marginHorizontal: theme.spacing.xs,
    },
    cancelButton: {
      backgroundColor: theme.colors.inputBackground,
      borderWidth: 1,
      borderColor: theme.colors.border,
    },
    linkButton: {
      backgroundColor: theme.colors.accent,
    },
    linkButtonDisabled: {
      backgroundColor: theme.colors.textMuted,
    },
  });

  return (
    <Modal
      visible={visible}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.modal}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={onClose}>
            <Ionicons name="arrow-back" size={24} color={theme.colors.text} />
          </TouchableOpacity>
          <Text style={styles.title}>Linked Devices</Text>
        </View>

        <View style={styles.content}>
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Device Management</Text>
            <Text style={styles.sectionDescription}>
              Link your devices to access PingSpace from anywhere. You can use the web version, 
              desktop app, or mobile app with the same account.
            </Text>
            
            <View style={styles.actionButtons}>
              <TouchableOpacity 
                style={[styles.actionButton, styles.secondaryButton]} 
                onPress={generateDeviceCode}
              >
                <Ionicons name="qr-code" size={20} color={theme.colors.text} />
                <Text style={[styles.buttonText, styles.secondaryButtonText]}>
                  Generate Code
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.actionButton} 
                onPress={() => setShowLinkDevice(true)}
              >
                <Ionicons name="add" size={20} color="#FFFFFF" />
                <Text style={styles.buttonText}>Link Device</Text>
              </TouchableOpacity>
            </View>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Your Devices ({devices.length})</Text>
            <FlatList
              style={styles.devicesList}
              data={devices}
              renderItem={renderDevice}
              keyExtractor={(item) => item.id}
              showsVerticalScrollIndicator={false}
            />
          </View>
        </View>

        {/* Link Device Modal */}
        <Modal
          visible={showLinkDevice}
          transparent
          animationType="fade"
          onRequestClose={() => setShowLinkDevice(false)}
        >
          <TouchableOpacity 
            style={styles.linkDeviceModal}
            activeOpacity={1}
            onPress={() => setShowLinkDevice(false)}
          >
            <TouchableOpacity 
              style={styles.linkDeviceContainer}
              activeOpacity={1}
              onPress={() => {}}
            >
              <Text style={styles.linkDeviceTitle}>Link New Device</Text>
              <Text style={styles.linkDeviceDescription}>
                Enter the 6-digit code displayed on the device you want to link to your account.
              </Text>
              
              <TextInput
                style={styles.codeInput}
                placeholder="Enter device code"
                placeholderTextColor={theme.colors.textMuted}
                value={deviceCode}
                onChangeText={setDeviceCode}
                maxLength={6}
                autoCapitalize="characters"
                autoCorrect={false}
                keyboardType="default"
              />
              
              <View style={styles.linkDeviceButtons}>
                <TouchableOpacity 
                  style={[styles.linkDeviceButton, styles.cancelButton]} 
                  onPress={() => setShowLinkDevice(false)}
                >
                  <Text style={[styles.buttonText, styles.secondaryButtonText]}>Cancel</Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={[
                    styles.linkDeviceButton, 
                    styles.linkButton,
                    (isLinking || !deviceCode.trim()) && styles.linkButtonDisabled
                  ]} 
                  onPress={handleLinkDevice}
                  disabled={isLinking || !deviceCode.trim()}
                >
                  {isLinking ? (
                    <ActivityIndicator size="small" color="#FFFFFF" />
                  ) : (
                    <Text style={[styles.buttonText]}>Link Device</Text>
                  )}
                </TouchableOpacity>
              </View>
            </TouchableOpacity>
          </TouchableOpacity>
        </Modal>
      </View>
    </Modal>
  );
};

export default DeviceManager;
